{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Seow\\\\Desktop\\\\CS\\\\Web Dev (Udemy)\\\\My Work\\\\book\\\\client\\\\src\\\\components\\\\Browse.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport BookCard from \"./BookCard\";\nimport axios from \"axios\";\n\nfunction Browse() {\n  const [books, setBooks] = useState([]);\n  /*\r\n   Note:\r\n   This component “subscribes” to a promise by axios.get, but it never “unsubscribes” or cancels the request. If for any reason, the component is unmounted before the promise resolves, the code will try to “set state” (calling setBooks) on an unmounted component. This will throw a warning.\r\n   */\n\n  useEffect(() => {\n    let isSubscribed = true;\n    axios.get(\"http://localhost:4000/\").then(res => {\n      if (isSubscribed) {\n        // Make sure setBooks is not executed when component is unmounted\n        setBooks(res.data);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return () => isSubscribed = false;\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  });\n}\n\nexport default Browse;","map":{"version":3,"sources":["C:/Users/Jonathan Seow/Desktop/CS/Web Dev (Udemy)/My Work/book/client/src/components/Browse.js"],"names":["React","useState","useEffect","Row","Col","BookCard","axios","Browse","books","setBooks","isSubscribed","get","then","res","data","catch","error","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,MAAT,GAAkB;AAEhB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AAEA;;;;;AAKAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,YAAY,GAAG,IAAnB;AAEAJ,IAAAA,KAAK,CAACK,GAAN,CAAU,wBAAV,EAAoCC,IAApC,CAAyCC,GAAG,IAAI;AAC9C,UAAIH,YAAJ,EAAkB;AAAE;AAClBD,QAAAA,QAAQ,CAACI,GAAG,CAACC,IAAL,CAAR;AACD;AACF,KAJD,EAIGC,KAJH,CAISC,KAAK,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAND;AAQA,WAAO,MAAMN,YAAY,GAAG,KAA5B;AAED,GAbQ,EAaN,EAbM,CAAT;AAeA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAKD;;AAED,eAAeH,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport BookCard from \"./BookCard\";\r\nimport axios from \"axios\";\r\n\r\nfunction Browse() {\r\n\r\n  const [books, setBooks] = useState([]);\r\n\r\n  /*\r\n   Note:\r\n   This component “subscribes” to a promise by axios.get, but it never “unsubscribes” or cancels the request. If for any reason, the component is unmounted before the promise resolves, the code will try to “set state” (calling setBooks) on an unmounted component. This will throw a warning.\r\n   */\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n\r\n    axios.get(\"http://localhost:4000/\").then(res => {\r\n      if (isSubscribed) { // Make sure setBooks is not executed when component is unmounted\r\n        setBooks(res.data);\r\n      }\r\n    }).catch(error => {\r\n      console.log(error);\r\n    });\r\n\r\n    return () => isSubscribed = false;\r\n\r\n  }, []);\r\n\r\n  return(\r\n    <div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Browse;\r\n"]},"metadata":{},"sourceType":"module"}