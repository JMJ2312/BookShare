{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jonathan Seow\\\\Desktop\\\\CS\\\\Web Dev (Udemy)\\\\My Work\\\\Bookstagram\\\\client\\\\src\\\\components\\\\Browse.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport BookCard from \"./BookCard\"; // import Search from \"./Search\";\n\nimport Header from \"./Header\";\nimport axios from \"axios\";\nimport { v1 as uuidv1 } from \"uuid\"; // Timestamp unique id\n\nfunction Browse() {\n  const [books, setBooks] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchBy, setSearchBy] = useState(\"Name\"); // Search bar filter\n\n  /*\r\n   Note:\r\n   This component “subscribes” to a promise by axios.get, but it never “unsubscribes” or cancels the request.\r\n   If for any reason, the component is unmounted before the promise resolves, the code will try to “set state” (calling setBooks) on an unmounted component.\r\n   This will throw a warning.\r\n   */\n\n  useEffect(() => {\n    let isSubscribed = true;\n    axios.get(\"http://localhost:4000/\").then(res => {\n      if (isSubscribed) {\n        // Make sure setBooks is not executed when component is unmounted\n        setBooks(res.data);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n    return () => isSubscribed = false;\n  }, []);\n  let filteredBooks = books.filter(book => {\n    // Access key as variable\n    return book[searchBy.toLowerCase()].toLowerCase().indexOf(search.toLowerCase()) !== -1;\n  });\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(Header, {\n    searchBy: searchBy,\n    setSearchBy: setSearchBy,\n    search: search,\n    setSearch: setSearch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Row, {\n    className: \"card-deck\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, filteredBooks.length === 0 ? React.createElement(\"h1\", {\n    className: \"no-results\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"No books found\") : null, filteredBooks.map(book => React.createElement(BookCard, {\n    key: uuidv1(),\n    name: book.name,\n    author: book.author,\n    description: book.description,\n    genre: book.genre,\n    image: book.image,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })))));\n}\n\nexport default Browse;","map":{"version":3,"sources":["C:/Users/Jonathan Seow/Desktop/CS/Web Dev (Udemy)/My Work/Bookstagram/client/src/components/Browse.js"],"names":["React","useState","useEffect","Row","BookCard","Header","axios","v1","uuidv1","Browse","books","setBooks","search","setSearch","searchBy","setSearchBy","isSubscribed","get","then","res","data","catch","error","console","log","filteredBooks","filter","book","toLowerCase","indexOf","length","map","name","author","description","genre","image"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,qBAAhB;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B,C,CAAqC;;AAErC,SAASC,MAAT,GAAkB;AAEhB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,MAAD,CAAxC,CAJgB,CAIkC;;AAElD;;;;;;;AAOAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,YAAY,GAAG,IAAnB;AAEAV,IAAAA,KAAK,CAACW,GAAN,CAAU,wBAAV,EAAoCC,IAApC,CAAyCC,GAAG,IAAI;AAC9C,UAAIH,YAAJ,EAAkB;AAAE;AAClBL,QAAAA,QAAQ,CAACQ,GAAG,CAACC,IAAL,CAAR;AACD;AACF,KAJD,EAIGC,KAJH,CAISC,KAAK,IAAI;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KAND;AAQA,WAAO,MAAMN,YAAY,GAAG,KAA5B;AAED,GAbQ,EAaN,EAbM,CAAT;AAeA,MAAIS,aAAa,GAAGf,KAAK,CAACgB,MAAN,CAAaC,IAAI,IAAI;AACvC;AACA,WAAOA,IAAI,CAACb,QAAQ,CAACc,WAAT,EAAD,CAAJ,CAA6BA,WAA7B,GAA2CC,OAA3C,CAAmDjB,MAAM,CAACgB,WAAP,EAAnD,MAA6E,CAAC,CAArF;AACD,GAHmB,CAApB;AAKA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAEd,QAAlB;AAA4B,IAAA,WAAW,EAAEC,WAAzC;AAAsD,IAAA,MAAM,EAAEH,MAA9D;AAAsE,IAAA,SAAS,EAAEC,SAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGY,aAAa,CAACK,MAAd,KAAyB,CAAzB,GAA6B;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA7B,GAA8E,IADjF,EAEGL,aAAa,CAACM,GAAd,CAAkBJ,IAAI,IAAI,oBAAC,QAAD;AAAU,IAAA,GAAG,EAAEnB,MAAM,EAArB;AAAyB,IAAA,IAAI,EAAEmB,IAAI,CAACK,IAApC;AAA0C,IAAA,MAAM,EAAEL,IAAI,CAACM,MAAvD;AAA+D,IAAA,WAAW,EAAEN,IAAI,CAACO,WAAjF;AAA8F,IAAA,KAAK,EAAEP,IAAI,CAACQ,KAA1G;AAAiH,IAAA,KAAK,EAAER,IAAI,CAACS,KAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1B,CAFH,CADF,CAFF,CADF;AAWD;;AAED,eAAe3B,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport BookCard from \"./BookCard\";\r\n// import Search from \"./Search\";\r\nimport Header from \"./Header\";\r\nimport axios from \"axios\";\r\nimport { v1 as uuidv1 } from \"uuid\"; // Timestamp unique id\r\n\r\nfunction Browse() {\r\n\r\n  const [books, setBooks] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchBy, setSearchBy] = useState(\"Name\"); // Search bar filter\r\n\r\n  /*\r\n   Note:\r\n   This component “subscribes” to a promise by axios.get, but it never “unsubscribes” or cancels the request.\r\n   If for any reason, the component is unmounted before the promise resolves, the code will try to “set state” (calling setBooks) on an unmounted component.\r\n   This will throw a warning.\r\n   */\r\n\r\n  useEffect(() => {\r\n    let isSubscribed = true;\r\n\r\n    axios.get(\"http://localhost:4000/\").then(res => {\r\n      if (isSubscribed) { // Make sure setBooks is not executed when component is unmounted\r\n        setBooks(res.data);\r\n      }\r\n    }).catch(error => {\r\n      console.log(error);\r\n    });\r\n\r\n    return () => isSubscribed = false;\r\n\r\n  }, []);\r\n\r\n  let filteredBooks = books.filter(book => {\r\n    // Access key as variable\r\n    return book[searchBy.toLowerCase()].toLowerCase().indexOf(search.toLowerCase()) !== -1;\r\n  });\r\n\r\n  return(\r\n    <div>\r\n      <Header searchBy={searchBy} setSearchBy={setSearchBy} search={search} setSearch={setSearch}/>\r\n      <div>\r\n        <Row className=\"card-deck\">\r\n          {filteredBooks.length === 0 ? <h1 className=\"no-results\">No books found</h1> : null}\r\n          {filteredBooks.map(book => <BookCard key={uuidv1()} name={book.name} author={book.author} description={book.description} genre={book.genre} image={book.image} />)}\r\n        </Row>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Browse;\r\n"]},"metadata":{},"sourceType":"module"}